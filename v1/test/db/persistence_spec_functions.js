// Generated by CoffeeScript 1.3.3
(function() {
  var create_entity_with_reference_and_check_populate, should;

  should = require("should");

  create_entity_with_reference_and_check_populate = function(data) {
    return describe("when " + data.entityName + " is saved with a reference to an existing " + data.referenceName, function() {
      var entity, referencedEntity;
      referencedEntity = null;
      entity = null;
      beforeEach(function(done) {
        entity = data.getEntityFn();
        referencedEntity = data.buildReferenceEntityFn();
        return referencedEntity.save(function(err) {
          should.not.exist(err);
          entity[data.referenceName] = referencedEntity.id;
          return entity.save(function(err) {
            should.not.exist(err);
            return done();
          });
        });
      });
      if (data.remove_entity_in_afterEach) {
        afterEach(function(done) {
          return entity.remove(function(err) {
            should.not.exist(err);
            return done();
          });
        });
      }
      return describe("when we specify that " + data.referenceName + " should be populated when we retrieve " + data.entityName, function() {
        var error, retrievedEntity;
        retrievedEntity = null;
        error = null;
        beforeEach(function(done) {
          return data.entityModel.findById(entity.id).populate(data.referenceName).run(function(err, result) {
            error = err;
            retrievedEntity = result;
            return done();
          });
        });
        it("should not fail", function() {
          return should.not.exist(error);
        });
        return it("should populate the " + data.referenceName + " property in the returned " + data.entityName, function() {
          return data.equalityFn(referencedEntity, retrievedEntity[data.referenceName]);
        });
      });
    });
  };

  module.exports = {
    create_entity_with_reference_and_check_populate: create_entity_with_reference_and_check_populate
  };

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var Customer, CustomerBuilder, app, customer, equalityHelper, mongoose, should, validationHelper;

  app = require("../../app");

  mongoose = require("mongoose");

  Customer = require("../../server/models/customer");

  CustomerBuilder = require("../builders/customer_builder");

  should = require("should");

  validationHelper = require("./mongoose_validation_helper");

  equalityHelper = require("../equality_functions");

  mongoose.connection.collection("customers").drop();

  customer = new CustomerBuilder().build();

  console.log(customer);

  describe("given a new customer", function() {
    var error;
    customer = null;
    error = null;
    beforeEach(function() {
      return customer = new CustomerBuilder().build();
    });
    describe("when it is saved with none of its required fields filled in", function() {
      beforeEach(function(done) {
        customer = new Customer();
        return customer.save(function(err) {
          error = err;
          return done();
        });
      });
      return it("should fail with validation errors for each required field", function() {
        should.exist(error);
        validationHelper.checkRequiredValidationErrorFor(error, "name");
        validationHelper.checkRequiredValidationErrorFor(error, "vatNumber");
        validationHelper.checkRequiredValidationErrorFor(error, "address.street");
        validationHelper.checkRequiredValidationErrorFor(error, "address.postalCode");
        return validationHelper.checkRequiredValidationErrorFor(error, "address.city");
      });
    });
    return describe("when it is saved with all of its required fields filled in", function() {
      beforeEach(function(done) {
        return customer.save(function(err) {
          error = err;
          return done();
        });
      });
      it("should not fail", function() {
        return should.not.exist(error);
      });
      return it("should contain a default false value for includeContactOnInvoice", function(done) {
        return Customer.findById(customer.id, function(err, result) {
          result.includeContactOnInvoice.should.be["false"];
          return done();
        });
      });
    });
  });

  describe("given an existing customer", function() {
    customer = null;
    beforeEach(function(done) {
      customer = new CustomerBuilder().withIncludeContactOnInvoice().build();
      return customer.save(function(err) {
        should.not.exist(err);
        return done();
      });
    });
    describe("when it is retrieved from the database", function() {
      var retrievedCustomer;
      retrievedCustomer = null;
      beforeEach(function(done) {
        return Customer.findById(customer.id, function(err, result) {
          should.not.exist(err);
          retrievedCustomer = result;
          return done();
        });
      });
      return it("should contain the same values that have been inserted", function() {
        return equalityHelper.customersShouldBeEqual(retrievedCustomer, customer);
      });
    });
    describe("when it is modified and updated", function() {
      beforeEach(function(done) {
        customer.name = "some other customer";
        customer.vatNumber = "0456.876.235";
        customer.address = {
          street: "some other street",
          postalCode: "12345",
          city: "some other city"
        };
        customer.phoneNumber = "123456789";
        customer.contact = {
          name: "some name",
          email: "some_email@hotmail.com"
        };
        return customer.save(function(err) {
          should.not.exist(err);
          return done();
        });
      });
      return it("contains the updated values in the database", function(done) {
        return Customer.findById(customer.id, function(err, result) {
          equalityHelper.customersShouldBeEqual(result, customer);
          return done();
        });
      });
    });
    return describe("when it is deleted", function() {
      beforeEach(function(done) {
        return customer.remove(function(err) {
          should.not.exist(err);
          return done();
        });
      });
      return it("can no longer be retrieved", function(done) {
        return Customer.findById(customer.id, function(err, result) {
          should.not.exist(result);
          return done();
        });
      });
    });
  });

  after(function(done) {
    mongoose.disconnect();
    return done();
  });

}).call(this);

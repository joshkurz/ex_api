// Generated by CoffeeScript 1.3.3
(function() {
  var User, UserBuilder, app, equalityHelper, mongoose, should, validationHelper;

  app = require("../../app");

  mongoose = require("mongoose");

  User = require("../../server/models/user");

  UserBuilder = require("../builders/user_builder");

  should = require("should");

  validationHelper = require("./mongoose_validation_helper");

  equalityHelper = require("../equality_functions");

  mongoose.connection.collection("users").drop();

  describe("given a new user", function() {
    var error, user;
    user = null;
    error = null;
    beforeEach(function() {
      return user = new UserBuilder().build();
    });
    describe("when it is saved with none of its required fields filled in", function() {
      beforeEach(function(done) {
        user = new User();
        user.salt = null;
        return user.save(function(err) {
          error = err;
          return done();
        });
      });
      return it("should fail with validation errors for each required field", function() {
        should.exist(error);
        validationHelper.checkRequiredValidationErrorFor(error, "name");
        validationHelper.checkRequiredValidationErrorFor(error, "email");
        validationHelper.checkRequiredValidationErrorFor(error, "salt");
        return validationHelper.checkRequiredValidationErrorFor(error, "passwdHash");
      });
    });
    return describe("when it is saved with all of its required fields filled in", function() {
      beforeEach(function(done) {
        return user.save(function(err) {
          error = err;
          return done();
        });
      });
      afterEach(function(done) {
        return user.remove(function(err) {
          return done();
        });
      });
      return it("should not fail", function() {
        return should.not.exist(error);
      });
    });
  });

  describe("given an existing user", function() {
    var user;
    user = null;
    beforeEach(function(done) {
      user = new UserBuilder().build();
      return user.save(function(err) {
        should.not.exist(err);
        return done();
      });
    });
    afterEach(function(done) {
      if (user.removed) {
        done();
      }
      return user.remove(function(err) {
        return done();
      });
    });
    describe("when it is retrieved from the database", function() {
      var retrievedUser;
      retrievedUser = null;
      beforeEach(function(done) {
        return User.findById(user.id, function(err, result) {
          should.not.exist(err);
          retrievedUser = result;
          return done();
        });
      });
      return it("should contain the same values that have been inserted", function() {
        return equalityHelper.usersShouldBeEqual(retrievedUser, user);
      });
    });
    describe("when it is modified and updated", function() {
      beforeEach(function(done) {
        user.name = "some user name";
        user.email = "some email";
        user.salt = "some salt value";
        user.passwdHash = "some passwd hash";
        return user.save(function(err) {
          should.not.exist(err);
          return done();
        });
      });
      return it("contains the updated values in the database", function(done) {
        return User.findById(user.id, function(err, result) {
          equalityHelper.usersShouldBeEqual(result, user);
          return done();
        });
      });
    });
    return describe("when it is deleted", function() {
      beforeEach(function(done) {
        return user.remove(function(err) {
          user.removed = true;
          should.not.exist(err);
          return done();
        });
      });
      return it("can no longer be retrieved", function(done) {
        return User.findById(user.id, function(err, result) {
          should.not.exist(result);
          return done();
        });
      });
    });
  });

  after(function(done) {
    mongoose.disconnect();
    return done();
  });

}).call(this);
